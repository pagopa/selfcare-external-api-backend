meta {
  name: getInstitutionProducts
  type: http
  seq: 2
}

get {
  url: {{apiBaseUrl}}/external/v2/institutions/{{institutionId}}/products?userId={{userId}}
  body: json
  auth: inherit
}

params:query {
  userId: {{userId}}
}

headers {
  Ocp-Apim-Subscription-Key: {{apimKeyPN}}
}

script:post-response {
  test("getInstitutionProducts ok", function () {
      expect(res.getStatus()).to.equal(200);
      
      const jsonData = res.getBody();
      
      // Check it's not empty
      expect(jsonData).to.be.an('array').that.is.not.empty;
  
      const contract = jsonData[0];
  
      // Check required fields
      expect(contract).to.have.all.keys(
          "id", 
          "title", 
          "contractTemplatePath", 
          "contractTemplateVersion", 
          "createdAt", 
          "description", 
          "urlPublic", 
          "urlBO", 
          "depictImageUrl", 
          "identityTokenAudience", 
          "logo", 
          "logoBgColor", 
          "roleMappings"
      );
  
      // Check roleMappings
      expect(contract.roleMappings).to.have.all.keys("MANAGER", "DELEGATE", "SUB_DELEGATE", "OPERATOR");
  
      // function to check each role
      function checkRole(role) {
          expect(role).to.have.keys("multiroleAllowed", "skipUserCreation", "roles");
          expect(role.multiroleAllowed).to.be.a('boolean');
          expect(role.skipUserCreation).to.be.a('boolean');
          expect(role.roles).to.be.an('array').that.is.not.empty;
  
          const firstRole = role.roles[0];
          expect(firstRole).to.have.all.keys("code", "label", "description");
          expect(firstRole.code).to.be.a('string');
          expect(firstRole.label).to.be.a('string');
          expect(firstRole.description).to.be.a('string');
      }
  
      // Check all roles
      checkRole(contract.roleMappings.MANAGER);
      checkRole(contract.roleMappings.DELEGATE);
      checkRole(contract.roleMappings.SUB_DELEGATE);
      checkRole(contract.roleMappings.OPERATOR);
  });
  
}

settings {
  encodeUrl: true
}
